program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "3500.14.1"}, {"coremlc-version", "3500.32.1"}})]
{
    func main<ios16>(tensor<fp32, [1, 576]> audio_input, tensor<fp32, [1, 128]> cell_state, tensor<fp32, [1, 128]> hidden_state) {
            tensor<int32, [1]> x_1_axes_0 = const()[name = tensor<string, []>("x_1_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<string, []> audio_input_to_fp16_dtype_0 = const()[name = tensor<string, []>("audio_input_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 576]> audio_input_to_fp16 = cast(dtype = audio_input_to_fp16_dtype_0, x = audio_input)[name = tensor<string, []>("cast_11")];
            tensor<fp16, [1, 1, 576]> x_1_cast_fp16 = expand_dims(axes = x_1_axes_0, x = audio_input_to_fp16)[name = tensor<string, []>("x_1_cast_fp16")];
            tensor<string, []> stft_out_pad_type_0 = const()[name = tensor<string, []>("stft_out_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> stft_out_pad_0 = const()[name = tensor<string, []>("stft_out_pad_0"), val = tensor<int32, [2]>([128, 128])];
            tensor<int32, [1]> stft_out_strides_0 = const()[name = tensor<string, []>("stft_out_strides_0"), val = tensor<int32, [1]>([256])];
            tensor<int32, [1]> stft_out_dilations_0 = const()[name = tensor<string, []>("stft_out_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> stft_out_groups_0 = const()[name = tensor<string, []>("stft_out_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [258, 1, 256]> stft_forward_basis_to_fp16_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [16512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64))), lut = tensor<fp16, [4]>([-0x1.48p-1, -0x1.ad8p-5, 0x1.344p-2, 0x1.7f4p-1]), name = tensor<string, []>("stft_forward_basis_to_fp16_palettized"), shape = tensor<uint32, [3]>([258, 1, 256])];
            tensor<fp16, [1, 258, 3]> stft_out_cast_fp16 = conv(dilations = stft_out_dilations_0, groups = stft_out_groups_0, pad = stft_out_pad_0, pad_type = stft_out_pad_type_0, strides = stft_out_strides_0, weight = stft_forward_basis_to_fp16_palettized, x = x_1_cast_fp16)[name = tensor<string, []>("stft_out_cast_fp16")];
            tensor<int32, [3]> var_25_begin_0 = const()[name = tensor<string, []>("op_25_begin_0"), val = tensor<int32, [3]>([0, 0, 0])];
            tensor<int32, [3]> var_25_end_0 = const()[name = tensor<string, []>("op_25_end_0"), val = tensor<int32, [3]>([1, 129, 3])];
            tensor<bool, [3]> var_25_end_mask_0 = const()[name = tensor<string, []>("op_25_end_mask_0"), val = tensor<bool, [3]>([true, false, true])];
            tensor<fp16, [1, 129, 3]> var_25_cast_fp16 = slice_by_index(begin = var_25_begin_0, end = var_25_end_0, end_mask = var_25_end_mask_0, x = stft_out_cast_fp16)[name = tensor<string, []>("op_25_cast_fp16")];
            tensor<int32, [3]> var_28_begin_0 = const()[name = tensor<string, []>("op_28_begin_0"), val = tensor<int32, [3]>([0, 129, 0])];
            tensor<int32, [3]> var_28_end_0 = const()[name = tensor<string, []>("op_28_end_0"), val = tensor<int32, [3]>([1, 258, 3])];
            tensor<bool, [3]> var_28_end_mask_0 = const()[name = tensor<string, []>("op_28_end_mask_0"), val = tensor<bool, [3]>([true, true, true])];
            tensor<fp16, [1, 129, 3]> var_28_cast_fp16 = slice_by_index(begin = var_28_begin_0, end = var_28_end_0, end_mask = var_28_end_mask_0, x = stft_out_cast_fp16)[name = tensor<string, []>("op_28_cast_fp16")];
            tensor<fp16, []> var_7_promoted_to_fp16 = const()[name = tensor<string, []>("op_7_promoted_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 3]> var_30_cast_fp16 = pow(x = var_25_cast_fp16, y = var_7_promoted_to_fp16)[name = tensor<string, []>("op_30_cast_fp16")];
            tensor<fp16, []> var_7_promoted_1_to_fp16 = const()[name = tensor<string, []>("op_7_promoted_1_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 3]> var_31_cast_fp16 = pow(x = var_28_cast_fp16, y = var_7_promoted_1_to_fp16)[name = tensor<string, []>("op_31_cast_fp16")];
            tensor<fp16, [1, 129, 3]> var_32_cast_fp16 = add(x = var_30_cast_fp16, y = var_31_cast_fp16)[name = tensor<string, []>("op_32_cast_fp16")];
            tensor<fp16, []> var_33_to_fp16 = const()[name = tensor<string, []>("op_33_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 129, 3]> var_34_cast_fp16 = add(x = var_32_cast_fp16, y = var_33_to_fp16)[name = tensor<string, []>("op_34_cast_fp16")];
            tensor<fp16, [1, 129, 3]> magnitude_cast_fp16 = sqrt(x = var_34_cast_fp16)[name = tensor<string, []>("magnitude_cast_fp16")];
            tensor<fp16, []> var_36_to_fp16 = const()[name = tensor<string, []>("op_36_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 129, 3]> var_37_cast_fp16 = add(x = magnitude_cast_fp16, y = var_36_to_fp16)[name = tensor<string, []>("op_37_cast_fp16")];
            tensor<fp16, []> input_1_epsilon_0_to_fp16 = const()[name = tensor<string, []>("input_1_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 129, 3]> input_1_cast_fp16 = log(epsilon = input_1_epsilon_0_to_fp16, x = var_37_cast_fp16)[name = tensor<string, []>("input_1_cast_fp16")];
            tensor<string, []> input_3_pad_type_0 = const()[name = tensor<string, []>("input_3_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_3_pad_0 = const()[name = tensor<string, []>("input_3_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_3_strides_0 = const()[name = tensor<string, []>("input_3_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_3_dilations_0 = const()[name = tensor<string, []>("input_3_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_3_groups_0 = const()[name = tensor<string, []>("input_3_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 129, 3]> encoder_layers_0_weight_to_fp16_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [12384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16640))), lut = tensor<fp16, [4]>([-0x1.24cp+4, -0x1.bd4p+1, -0x1.c98p-1, 0x1.1ccp-5]), name = tensor<string, []>("encoder_layers_0_weight_to_fp16_palettized"), shape = tensor<uint32, [3]>([128, 129, 3])];
            tensor<fp16, [128]> encoder_layers_0_bias_to_fp16 = const()[name = tensor<string, []>("encoder_layers_0_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(29120)))];
            tensor<fp16, [1, 128, 3]> input_3_cast_fp16 = conv(bias = encoder_layers_0_bias_to_fp16, dilations = input_3_dilations_0, groups = input_3_groups_0, pad = input_3_pad_0, pad_type = input_3_pad_type_0, strides = input_3_strides_0, weight = encoder_layers_0_weight_to_fp16_palettized, x = input_1_cast_fp16)[name = tensor<string, []>("input_3_cast_fp16")];
            tensor<fp16, [1, 128, 3]> x_3_cast_fp16 = relu(x = input_3_cast_fp16)[name = tensor<string, []>("x_3_cast_fp16")];
            tensor<fp16, []> const_0_to_fp16 = const()[name = tensor<string, []>("const_0_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, []> var_39_to_fp16 = const()[name = tensor<string, []>("op_39_to_fp16"), val = tensor<fp16, []>(0x1.388p+13)];
            tensor<fp16, [1, 128, 3]> clip_0_cast_fp16 = clip(alpha = const_0_to_fp16, beta = var_39_to_fp16, x = x_3_cast_fp16)[name = tensor<string, []>("clip_0_cast_fp16")];
            tensor<string, []> input_7_pad_type_0 = const()[name = tensor<string, []>("input_7_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_7_pad_0 = const()[name = tensor<string, []>("input_7_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_7_strides_0 = const()[name = tensor<string, []>("input_7_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_7_dilations_0 = const()[name = tensor<string, []>("input_7_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_7_groups_0 = const()[name = tensor<string, []>("input_7_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [64, 128, 3]> encoder_layers_2_weight_to_fp16_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [6144]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(29440))), lut = tensor<fp16, [4]>([-0x1.bb8p-3, -0x1.6fp-6, 0x1.9a4p-4, 0x1.a68p-1]), name = tensor<string, []>("encoder_layers_2_weight_to_fp16_palettized"), shape = tensor<uint32, [3]>([64, 128, 3])];
            tensor<fp16, [64]> encoder_layers_2_bias_to_fp16 = const()[name = tensor<string, []>("encoder_layers_2_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(35648)))];
            tensor<fp16, [1, 64, 3]> input_7_cast_fp16 = conv(bias = encoder_layers_2_bias_to_fp16, dilations = input_7_dilations_0, groups = input_7_groups_0, pad = input_7_pad_0, pad_type = input_7_pad_type_0, strides = input_7_strides_0, weight = encoder_layers_2_weight_to_fp16_palettized, x = clip_0_cast_fp16)[name = tensor<string, []>("input_7_cast_fp16")];
            tensor<fp16, [1, 64, 3]> x_5_cast_fp16 = relu(x = input_7_cast_fp16)[name = tensor<string, []>("x_5_cast_fp16")];
            tensor<fp16, []> const_1_to_fp16 = const()[name = tensor<string, []>("const_1_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 3]> clip_1_cast_fp16 = clip(alpha = const_1_to_fp16, beta = var_39_to_fp16, x = x_5_cast_fp16)[name = tensor<string, []>("clip_1_cast_fp16")];
            tensor<string, []> input_11_pad_type_0 = const()[name = tensor<string, []>("input_11_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_11_pad_0 = const()[name = tensor<string, []>("input_11_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_11_strides_0 = const()[name = tensor<string, []>("input_11_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_11_dilations_0 = const()[name = tensor<string, []>("input_11_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_11_groups_0 = const()[name = tensor<string, []>("input_11_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [64, 64, 3]> encoder_layers_4_weight_to_fp16_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [3072]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(35840))), lut = tensor<fp16, [4]>([-0x1.2a8p-2, 0x1.044p-5, 0x1.c74p+0, 0x1.d2p+2]), name = tensor<string, []>("encoder_layers_4_weight_to_fp16_palettized"), shape = tensor<uint32, [3]>([64, 64, 3])];
            tensor<fp16, [64]> encoder_layers_4_bias_to_fp16 = const()[name = tensor<string, []>("encoder_layers_4_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(38976)))];
            tensor<fp16, [1, 64, 3]> input_11_cast_fp16 = conv(bias = encoder_layers_4_bias_to_fp16, dilations = input_11_dilations_0, groups = input_11_groups_0, pad = input_11_pad_0, pad_type = input_11_pad_type_0, strides = input_11_strides_0, weight = encoder_layers_4_weight_to_fp16_palettized, x = clip_1_cast_fp16)[name = tensor<string, []>("input_11_cast_fp16")];
            tensor<fp16, [1, 64, 3]> x_7_cast_fp16 = relu(x = input_11_cast_fp16)[name = tensor<string, []>("x_7_cast_fp16")];
            tensor<fp16, []> const_2_to_fp16 = const()[name = tensor<string, []>("const_2_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 3]> clip_2_cast_fp16 = clip(alpha = const_2_to_fp16, beta = var_39_to_fp16, x = x_7_cast_fp16)[name = tensor<string, []>("clip_2_cast_fp16")];
            tensor<string, []> input_15_pad_type_0 = const()[name = tensor<string, []>("input_15_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_15_pad_0 = const()[name = tensor<string, []>("input_15_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_15_strides_0 = const()[name = tensor<string, []>("input_15_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_15_dilations_0 = const()[name = tensor<string, []>("input_15_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_15_groups_0 = const()[name = tensor<string, []>("input_15_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 64, 3]> encoder_layers_6_weight_to_fp16_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [6144]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39168))), lut = tensor<fp16, [4]>([-0x1.cdcp-3, 0x1.33p-8, 0x1.07cp+3, 0x1.534p+4]), name = tensor<string, []>("encoder_layers_6_weight_to_fp16_palettized"), shape = tensor<uint32, [3]>([128, 64, 3])];
            tensor<fp16, [128]> encoder_layers_6_bias_to_fp16 = const()[name = tensor<string, []>("encoder_layers_6_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(45376)))];
            tensor<fp16, [1, 128, 3]> input_15_cast_fp16 = conv(bias = encoder_layers_6_bias_to_fp16, dilations = input_15_dilations_0, groups = input_15_groups_0, pad = input_15_pad_0, pad_type = input_15_pad_type_0, strides = input_15_strides_0, weight = encoder_layers_6_weight_to_fp16_palettized, x = clip_2_cast_fp16)[name = tensor<string, []>("input_15_cast_fp16")];
            tensor<fp16, [1, 128, 3]> x_9_cast_fp16 = relu(x = input_15_cast_fp16)[name = tensor<string, []>("x_9_cast_fp16")];
            tensor<fp16, []> const_3_to_fp16 = const()[name = tensor<string, []>("const_3_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 128, 3]> clip_3_cast_fp16 = clip(alpha = const_3_to_fp16, beta = var_39_to_fp16, x = x_9_cast_fp16)[name = tensor<string, []>("clip_3_cast_fp16")];
            tensor<int32, [3]> transpose_0_perm_0 = const()[name = tensor<string, []>("transpose_0_perm_0"), val = tensor<int32, [3]>([2, 0, 1])];
            tensor<string, []> transpose_0_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("transpose_0_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> hx_1_axes_0 = const()[name = tensor<string, []>("hx_1_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> hidden_state_to_fp16_dtype_0 = const()[name = tensor<string, []>("hidden_state_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> hidden_state_to_fp16 = cast(dtype = hidden_state_to_fp16_dtype_0, x = hidden_state)[name = tensor<string, []>("cast_10")];
            tensor<fp16, [1, 1, 128]> hx_1_cast_fp16 = expand_dims(axes = hx_1_axes_0, x = hidden_state_to_fp16)[name = tensor<string, []>("hx_1_cast_fp16")];
            tensor<int32, [1]> hx_axes_0 = const()[name = tensor<string, []>("hx_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> cell_state_to_fp16_dtype_0 = const()[name = tensor<string, []>("cell_state_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> cell_state_to_fp16 = cast(dtype = cell_state_to_fp16_dtype_0, x = cell_state)[name = tensor<string, []>("cast_9")];
            tensor<fp16, [1, 1, 128]> hx_cast_fp16 = expand_dims(axes = hx_axes_0, x = cell_state_to_fp16)[name = tensor<string, []>("hx_cast_fp16")];
            tensor<fp32, [512]> concat_0 = const()[name = tensor<string, []>("concat_0"), val = tensor<fp32, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(45696)))];
            tensor<fp32, [512, 128]> concat_1_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [16384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(47808))), lut = tensor<fp32, [4]>([0x1.6ead62p-4, -0x1.5507f4p-3, 0x1.c17cf6p-2, -0x1.0e92c2p-1]), name = tensor<string, []>("concat_1_palettized"), shape = tensor<uint32, [2]>([512, 128])];
            tensor<fp32, [512, 128]> concat_2_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [16384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64256))), lut = tensor<fp32, [4]>([-0x1.11a7dcp-3, 0x1.e8d5aap-3, -0x1.415dd6p-1, 0x1.7cdd4cp-1]), name = tensor<string, []>("concat_2_palettized"), shape = tensor<uint32, [2]>([512, 128])];
            tensor<int32, [1]> lstm_out_batch_first_lstm_h0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_batch_first_lstm_h0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_batch_first_lstm_h0_squeeze_cast_fp16 = squeeze(axes = lstm_out_batch_first_lstm_h0_squeeze_axes_0, x = hx_1_cast_fp16)[name = tensor<string, []>("lstm_out_batch_first_lstm_h0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_batch_first_lstm_c0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_batch_first_lstm_c0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_batch_first_lstm_c0_squeeze_cast_fp16 = squeeze(axes = lstm_out_batch_first_lstm_c0_squeeze_axes_0, x = hx_cast_fp16)[name = tensor<string, []>("lstm_out_batch_first_lstm_c0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<string, []> lstm_out_batch_first_direction_0 = const()[name = tensor<string, []>("lstm_out_batch_first_direction_0"), val = tensor<string, []>("forward")];
            tensor<bool, []> lstm_out_batch_first_output_sequence_0 = const()[name = tensor<string, []>("lstm_out_batch_first_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> lstm_out_batch_first_recurrent_activation_0 = const()[name = tensor<string, []>("lstm_out_batch_first_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> lstm_out_batch_first_cell_activation_0 = const()[name = tensor<string, []>("lstm_out_batch_first_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> lstm_out_batch_first_activation_0 = const()[name = tensor<string, []>("lstm_out_batch_first_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp16, [3, 1, 128]> transpose_0_cast_fp16 = transpose(perm = transpose_0_perm_0, x = clip_3_cast_fp16)[name = tensor<string, []>("transpose_1")];
            tensor<fp32, [3, 1, 128]> transpose_0_cast_fp16_to_fp32 = cast(dtype = transpose_0_cast_fp16_to_fp32_dtype_0, x = transpose_0_cast_fp16)[name = tensor<string, []>("cast_6")];
            tensor<fp32, [1, 128]> lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_batch_first_lstm_h0_squeeze_cast_fp16)[name = tensor<string, []>("cast_7")];
            tensor<fp32, [1, 128]> lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_batch_first_lstm_c0_squeeze_cast_fp16)[name = tensor<string, []>("cast_8")];
            tensor<fp32, [3, 1, 128]> lstm_out_batch_first_0, tensor<fp32, [1, 128]> lstm_out_batch_first_1, tensor<fp32, [1, 128]> lstm_out_batch_first_2 = lstm(activation = lstm_out_batch_first_activation_0, bias = concat_0, cell_activation = lstm_out_batch_first_cell_activation_0, direction = lstm_out_batch_first_direction_0, initial_c = lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32, initial_h = lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32, output_sequence = lstm_out_batch_first_output_sequence_0, recurrent_activation = lstm_out_batch_first_recurrent_activation_0, weight_hh = concat_2_palettized, weight_ih = concat_1_palettized, x = transpose_0_cast_fp16_to_fp32)[name = tensor<string, []>("lstm_out_batch_first")];
            tensor<int32, [3]> transpose_1_perm_0 = const()[name = tensor<string, []>("transpose_1_perm_0"), val = tensor<int32, [3]>([1, 2, 0])];
            tensor<string, []> lstm_out_batch_first_0_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_0_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<int32, [1]> hn_axes_0 = const()[name = tensor<string, []>("hn_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_batch_first_1_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_1_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_batch_first_1_to_fp16 = cast(dtype = lstm_out_batch_first_1_to_fp16_dtype_0, x = lstm_out_batch_first_1)[name = tensor<string, []>("cast_5")];
            tensor<fp16, [1, 1, 128]> hn_cast_fp16 = expand_dims(axes = hn_axes_0, x = lstm_out_batch_first_1_to_fp16)[name = tensor<string, []>("hn_cast_fp16")];
            tensor<int32, [1]> cn_axes_0 = const()[name = tensor<string, []>("cn_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_batch_first_2_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_2_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_batch_first_2_to_fp16 = cast(dtype = lstm_out_batch_first_2_to_fp16_dtype_0, x = lstm_out_batch_first_2)[name = tensor<string, []>("cast_4")];
            tensor<fp16, [1, 1, 128]> cn_cast_fp16 = expand_dims(axes = cn_axes_0, x = lstm_out_batch_first_2_to_fp16)[name = tensor<string, []>("cn_cast_fp16")];
            tensor<string, []> input_pad_type_0 = const()[name = tensor<string, []>("input_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> input_strides_0 = const()[name = tensor<string, []>("input_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> input_pad_0 = const()[name = tensor<string, []>("input_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> input_dilations_0 = const()[name = tensor<string, []>("input_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_groups_0 = const()[name = tensor<string, []>("input_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 1]> decoder_final_conv_weight_to_fp16 = const()[name = tensor<string, []>("decoder_final_conv_weight_to_fp16"), val = tensor<fp16, [1, 128, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(80704)))];
            tensor<fp16, [1]> decoder_final_conv_bias_to_fp16 = const()[name = tensor<string, []>("decoder_final_conv_bias_to_fp16"), val = tensor<fp16, [1]>([0x1.dfp-5])];
            tensor<fp16, [3, 1, 128]> lstm_out_batch_first_0_to_fp16 = cast(dtype = lstm_out_batch_first_0_to_fp16_dtype_0, x = lstm_out_batch_first_0)[name = tensor<string, []>("cast_3")];
            tensor<fp16, [1, 128, 3]> transpose_1_cast_fp16 = transpose(perm = transpose_1_perm_0, x = lstm_out_batch_first_0_to_fp16)[name = tensor<string, []>("transpose_0")];
            tensor<fp16, [1, 1, 3]> input_cast_fp16 = conv(bias = decoder_final_conv_bias_to_fp16, dilations = input_dilations_0, groups = input_groups_0, pad = input_pad_0, pad_type = input_pad_type_0, strides = input_strides_0, weight = decoder_final_conv_weight_to_fp16, x = transpose_1_cast_fp16)[name = tensor<string, []>("input_cast_fp16")];
            tensor<fp16, [1, 1, 3]> out_cast_fp16 = sigmoid(x = input_cast_fp16)[name = tensor<string, []>("out_cast_fp16")];
            tensor<int32, [1]> var_124_axes_0 = const()[name = tensor<string, []>("op_124_axes_0"), val = tensor<int32, [1]>([2])];
            tensor<bool, []> var_124_keep_dims_0 = const()[name = tensor<string, []>("op_124_keep_dims_0"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1, 1]> var_124_cast_fp16 = reduce_mean(axes = var_124_axes_0, keep_dims = var_124_keep_dims_0, x = out_cast_fp16)[name = tensor<string, []>("op_124_cast_fp16")];
            tensor<string, []> var_124_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_124_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> var_125_axes_0 = const()[name = tensor<string, []>("op_125_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> var_125_cast_fp16 = squeeze(axes = var_125_axes_0, x = hn_cast_fp16)[name = tensor<string, []>("op_125_cast_fp16")];
            tensor<string, []> var_125_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_125_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> var_126_axes_0 = const()[name = tensor<string, []>("op_126_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> var_126_cast_fp16 = squeeze(axes = var_126_axes_0, x = cn_cast_fp16)[name = tensor<string, []>("op_126_cast_fp16")];
            tensor<string, []> var_126_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_126_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<fp32, [1, 1, 1]> vad_output = cast(dtype = var_124_cast_fp16_to_fp32_dtype_0, x = var_124_cast_fp16)[name = tensor<string, []>("cast_0")];
            tensor<fp32, [1, 128]> new_hidden_state = cast(dtype = var_125_cast_fp16_to_fp32_dtype_0, x = var_125_cast_fp16)[name = tensor<string, []>("cast_1")];
            tensor<fp32, [1, 128]> new_cell_state = cast(dtype = var_126_cast_fp16_to_fp32_dtype_0, x = var_126_cast_fp16)[name = tensor<string, []>("cast_2")];
        } -> (vad_output, new_hidden_state, new_cell_state);
}