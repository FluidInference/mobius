program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "3500.14.1"}, {"coremlc-version", "3500.32.1"}})]
{
    func main<ios16>(tensor<fp32, [1, 576]> audio_input, tensor<fp32, [1, 128]> cell_state, tensor<fp32, [1, 128]> hidden_state) {
            tensor<int32, [4]> x_1_pad_0 = const()[name = tensor<string, []>("x_1_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 64])];
            tensor<string, []> x_1_mode_0 = const()[name = tensor<string, []>("x_1_mode_0"), val = tensor<string, []>("reflect")];
            tensor<string, []> audio_input_to_fp16_dtype_0 = const()[name = tensor<string, []>("audio_input_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, []> const_0_to_fp16 = const()[name = tensor<string, []>("const_0_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 576]> audio_input_to_fp16 = cast(dtype = audio_input_to_fp16_dtype_0, x = audio_input)[name = tensor<string, []>("cast_11")];
            tensor<fp16, [1, 640]> x_1_cast_fp16 = pad(constant_val = const_0_to_fp16, mode = x_1_mode_0, pad = x_1_pad_0, x = audio_input_to_fp16)[name = tensor<string, []>("x_1_cast_fp16")];
            tensor<int32, [1]> x_3_axes_0 = const()[name = tensor<string, []>("x_3_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 640]> x_3_cast_fp16 = expand_dims(axes = x_3_axes_0, x = x_1_cast_fp16)[name = tensor<string, []>("x_3_cast_fp16")];
            tensor<string, []> stft_out_pad_type_0 = const()[name = tensor<string, []>("stft_out_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> stft_out_strides_0 = const()[name = tensor<string, []>("stft_out_strides_0"), val = tensor<int32, [1]>([128])];
            tensor<int32, [2]> stft_out_pad_0 = const()[name = tensor<string, []>("stft_out_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> stft_out_dilations_0 = const()[name = tensor<string, []>("stft_out_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> stft_out_groups_0 = const()[name = tensor<string, []>("stft_out_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [258, 1, 256]> stft_forward_basis_to_fp16_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [33024]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64))), lut = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(33152))), name = tensor<string, []>("stft_forward_basis_to_fp16_palettized"), shape = tensor<uint32, [3]>([258, 1, 256])];
            tensor<fp16, [1, 258, 4]> stft_out_cast_fp16 = conv(dilations = stft_out_dilations_0, groups = stft_out_groups_0, pad = stft_out_pad_0, pad_type = stft_out_pad_type_0, strides = stft_out_strides_0, weight = stft_forward_basis_to_fp16_palettized, x = x_3_cast_fp16)[name = tensor<string, []>("stft_out_cast_fp16")];
            tensor<int32, [3]> var_28_begin_0 = const()[name = tensor<string, []>("op_28_begin_0"), val = tensor<int32, [3]>([0, 0, 0])];
            tensor<int32, [3]> var_28_end_0 = const()[name = tensor<string, []>("op_28_end_0"), val = tensor<int32, [3]>([1, 129, 4])];
            tensor<bool, [3]> var_28_end_mask_0 = const()[name = tensor<string, []>("op_28_end_mask_0"), val = tensor<bool, [3]>([true, false, true])];
            tensor<fp16, [1, 129, 4]> var_28_cast_fp16 = slice_by_index(begin = var_28_begin_0, end = var_28_end_0, end_mask = var_28_end_mask_0, x = stft_out_cast_fp16)[name = tensor<string, []>("op_28_cast_fp16")];
            tensor<int32, [3]> var_31_begin_0 = const()[name = tensor<string, []>("op_31_begin_0"), val = tensor<int32, [3]>([0, 129, 0])];
            tensor<int32, [3]> var_31_end_0 = const()[name = tensor<string, []>("op_31_end_0"), val = tensor<int32, [3]>([1, 258, 4])];
            tensor<bool, [3]> var_31_end_mask_0 = const()[name = tensor<string, []>("op_31_end_mask_0"), val = tensor<bool, [3]>([true, true, true])];
            tensor<fp16, [1, 129, 4]> var_31_cast_fp16 = slice_by_index(begin = var_31_begin_0, end = var_31_end_0, end_mask = var_31_end_mask_0, x = stft_out_cast_fp16)[name = tensor<string, []>("op_31_cast_fp16")];
            tensor<fp16, []> var_7_promoted_to_fp16 = const()[name = tensor<string, []>("op_7_promoted_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_33_cast_fp16 = pow(x = var_28_cast_fp16, y = var_7_promoted_to_fp16)[name = tensor<string, []>("op_33_cast_fp16")];
            tensor<fp16, []> var_7_promoted_1_to_fp16 = const()[name = tensor<string, []>("op_7_promoted_1_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_34_cast_fp16 = pow(x = var_31_cast_fp16, y = var_7_promoted_1_to_fp16)[name = tensor<string, []>("op_34_cast_fp16")];
            tensor<fp16, [1, 129, 4]> var_35_cast_fp16 = add(x = var_33_cast_fp16, y = var_34_cast_fp16)[name = tensor<string, []>("op_35_cast_fp16")];
            tensor<fp16, []> var_36_to_fp16 = const()[name = tensor<string, []>("op_36_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 129, 4]> var_37_cast_fp16 = add(x = var_35_cast_fp16, y = var_36_to_fp16)[name = tensor<string, []>("op_37_cast_fp16")];
            tensor<fp16, [1, 129, 4]> input_1_cast_fp16 = sqrt(x = var_37_cast_fp16)[name = tensor<string, []>("input_1_cast_fp16")];
            tensor<string, []> input_3_pad_type_0 = const()[name = tensor<string, []>("input_3_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_3_pad_0 = const()[name = tensor<string, []>("input_3_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_3_strides_0 = const()[name = tensor<string, []>("input_3_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_3_dilations_0 = const()[name = tensor<string, []>("input_3_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_3_groups_0 = const()[name = tensor<string, []>("input_3_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 129, 3]> encoder_layers_0_weight_to_fp16_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [24768]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(33280))), lut = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(58112))), name = tensor<string, []>("encoder_layers_0_weight_to_fp16_palettized"), shape = tensor<uint32, [3]>([128, 129, 3])];
            tensor<fp16, [128]> encoder_layers_0_bias_to_fp16 = const()[name = tensor<string, []>("encoder_layers_0_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(58240)))];
            tensor<fp16, [1, 128, 4]> input_3_cast_fp16 = conv(bias = encoder_layers_0_bias_to_fp16, dilations = input_3_dilations_0, groups = input_3_groups_0, pad = input_3_pad_0, pad_type = input_3_pad_type_0, strides = input_3_strides_0, weight = encoder_layers_0_weight_to_fp16_palettized, x = input_1_cast_fp16)[name = tensor<string, []>("input_3_cast_fp16")];
            tensor<fp16, [1, 128, 4]> x_5_cast_fp16 = relu(x = input_3_cast_fp16)[name = tensor<string, []>("x_5_cast_fp16")];
            tensor<fp16, []> const_1_to_fp16 = const()[name = tensor<string, []>("const_1_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, []> var_40_to_fp16 = const()[name = tensor<string, []>("op_40_to_fp16"), val = tensor<fp16, []>(0x1.388p+13)];
            tensor<fp16, [1, 128, 4]> clip_0_cast_fp16 = clip(alpha = const_1_to_fp16, beta = var_40_to_fp16, x = x_5_cast_fp16)[name = tensor<string, []>("clip_0_cast_fp16")];
            tensor<string, []> input_7_pad_type_0 = const()[name = tensor<string, []>("input_7_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_7_pad_0 = const()[name = tensor<string, []>("input_7_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_7_strides_0 = const()[name = tensor<string, []>("input_7_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_7_dilations_0 = const()[name = tensor<string, []>("input_7_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_7_groups_0 = const()[name = tensor<string, []>("input_7_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [64, 128, 3]> encoder_layers_2_weight_to_fp16_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [12288]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(58560))), lut = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(70912))), name = tensor<string, []>("encoder_layers_2_weight_to_fp16_palettized"), shape = tensor<uint32, [3]>([64, 128, 3])];
            tensor<fp16, [64]> encoder_layers_2_bias_to_fp16 = const()[name = tensor<string, []>("encoder_layers_2_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(71040)))];
            tensor<fp16, [1, 64, 2]> input_7_cast_fp16 = conv(bias = encoder_layers_2_bias_to_fp16, dilations = input_7_dilations_0, groups = input_7_groups_0, pad = input_7_pad_0, pad_type = input_7_pad_type_0, strides = input_7_strides_0, weight = encoder_layers_2_weight_to_fp16_palettized, x = clip_0_cast_fp16)[name = tensor<string, []>("input_7_cast_fp16")];
            tensor<fp16, [1, 64, 2]> x_7_cast_fp16 = relu(x = input_7_cast_fp16)[name = tensor<string, []>("x_7_cast_fp16")];
            tensor<fp16, []> const_2_to_fp16 = const()[name = tensor<string, []>("const_2_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 2]> clip_1_cast_fp16 = clip(alpha = const_2_to_fp16, beta = var_40_to_fp16, x = x_7_cast_fp16)[name = tensor<string, []>("clip_1_cast_fp16")];
            tensor<string, []> input_11_pad_type_0 = const()[name = tensor<string, []>("input_11_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_11_pad_0 = const()[name = tensor<string, []>("input_11_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_11_strides_0 = const()[name = tensor<string, []>("input_11_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_11_dilations_0 = const()[name = tensor<string, []>("input_11_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_11_groups_0 = const()[name = tensor<string, []>("input_11_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [64, 64, 3]> encoder_layers_4_weight_to_fp16_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [6144]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(71232))), lut = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(77440))), name = tensor<string, []>("encoder_layers_4_weight_to_fp16_palettized"), shape = tensor<uint32, [3]>([64, 64, 3])];
            tensor<fp16, [64]> encoder_layers_4_bias_to_fp16 = const()[name = tensor<string, []>("encoder_layers_4_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(77568)))];
            tensor<fp16, [1, 64, 1]> input_11_cast_fp16 = conv(bias = encoder_layers_4_bias_to_fp16, dilations = input_11_dilations_0, groups = input_11_groups_0, pad = input_11_pad_0, pad_type = input_11_pad_type_0, strides = input_11_strides_0, weight = encoder_layers_4_weight_to_fp16_palettized, x = clip_1_cast_fp16)[name = tensor<string, []>("input_11_cast_fp16")];
            tensor<fp16, [1, 64, 1]> x_9_cast_fp16 = relu(x = input_11_cast_fp16)[name = tensor<string, []>("x_9_cast_fp16")];
            tensor<fp16, []> const_3_to_fp16 = const()[name = tensor<string, []>("const_3_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 1]> clip_2_cast_fp16 = clip(alpha = const_3_to_fp16, beta = var_40_to_fp16, x = x_9_cast_fp16)[name = tensor<string, []>("clip_2_cast_fp16")];
            tensor<string, []> input_15_pad_type_0 = const()[name = tensor<string, []>("input_15_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_15_pad_0 = const()[name = tensor<string, []>("input_15_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_15_strides_0 = const()[name = tensor<string, []>("input_15_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_15_dilations_0 = const()[name = tensor<string, []>("input_15_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_15_groups_0 = const()[name = tensor<string, []>("input_15_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 64, 3]> encoder_layers_6_weight_to_fp16_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [12288]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(77760))), lut = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(90112))), name = tensor<string, []>("encoder_layers_6_weight_to_fp16_palettized"), shape = tensor<uint32, [3]>([128, 64, 3])];
            tensor<fp16, [128]> encoder_layers_6_bias_to_fp16 = const()[name = tensor<string, []>("encoder_layers_6_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(90240)))];
            tensor<fp16, [1, 128, 1]> input_15_cast_fp16 = conv(bias = encoder_layers_6_bias_to_fp16, dilations = input_15_dilations_0, groups = input_15_groups_0, pad = input_15_pad_0, pad_type = input_15_pad_type_0, strides = input_15_strides_0, weight = encoder_layers_6_weight_to_fp16_palettized, x = clip_2_cast_fp16)[name = tensor<string, []>("input_15_cast_fp16")];
            tensor<fp16, [1, 128, 1]> x_11_cast_fp16 = relu(x = input_15_cast_fp16)[name = tensor<string, []>("x_11_cast_fp16")];
            tensor<fp16, []> const_4_to_fp16 = const()[name = tensor<string, []>("const_4_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 128, 1]> clip_3_cast_fp16 = clip(alpha = const_4_to_fp16, beta = var_40_to_fp16, x = x_11_cast_fp16)[name = tensor<string, []>("clip_3_cast_fp16")];
            tensor<int32, [3]> transpose_0_perm_0 = const()[name = tensor<string, []>("transpose_0_perm_0"), val = tensor<int32, [3]>([2, 0, 1])];
            tensor<string, []> transpose_0_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("transpose_0_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> hx_1_axes_0 = const()[name = tensor<string, []>("hx_1_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> hidden_state_to_fp16_dtype_0 = const()[name = tensor<string, []>("hidden_state_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> hidden_state_to_fp16 = cast(dtype = hidden_state_to_fp16_dtype_0, x = hidden_state)[name = tensor<string, []>("cast_10")];
            tensor<fp16, [1, 1, 128]> hx_1_cast_fp16 = expand_dims(axes = hx_1_axes_0, x = hidden_state_to_fp16)[name = tensor<string, []>("hx_1_cast_fp16")];
            tensor<int32, [1]> hx_axes_0 = const()[name = tensor<string, []>("hx_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> cell_state_to_fp16_dtype_0 = const()[name = tensor<string, []>("cell_state_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> cell_state_to_fp16 = cast(dtype = cell_state_to_fp16_dtype_0, x = cell_state)[name = tensor<string, []>("cast_9")];
            tensor<fp16, [1, 1, 128]> hx_cast_fp16 = expand_dims(axes = hx_axes_0, x = cell_state_to_fp16)[name = tensor<string, []>("hx_cast_fp16")];
            tensor<fp32, [512]> concat_0 = const()[name = tensor<string, []>("concat_0"), val = tensor<fp32, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(90560)))];
            tensor<fp32, [512, 128]> concat_1_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [32768]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(92672))), lut = tensor<fp32, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(125504))), name = tensor<string, []>("concat_1_palettized"), shape = tensor<uint32, [2]>([512, 128])];
            tensor<fp32, [512, 128]> concat_2_palettized = constexpr_lut_to_dense()[indices = tensor<uint8, [32768]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(125632))), lut = tensor<fp32, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(158464))), name = tensor<string, []>("concat_2_palettized"), shape = tensor<uint32, [2]>([512, 128])];
            tensor<int32, [1]> lstm_out_batch_first_lstm_h0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_batch_first_lstm_h0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_batch_first_lstm_h0_squeeze_cast_fp16 = squeeze(axes = lstm_out_batch_first_lstm_h0_squeeze_axes_0, x = hx_1_cast_fp16)[name = tensor<string, []>("lstm_out_batch_first_lstm_h0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_batch_first_lstm_c0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_batch_first_lstm_c0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_batch_first_lstm_c0_squeeze_cast_fp16 = squeeze(axes = lstm_out_batch_first_lstm_c0_squeeze_axes_0, x = hx_cast_fp16)[name = tensor<string, []>("lstm_out_batch_first_lstm_c0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<string, []> lstm_out_batch_first_direction_0 = const()[name = tensor<string, []>("lstm_out_batch_first_direction_0"), val = tensor<string, []>("forward")];
            tensor<bool, []> lstm_out_batch_first_output_sequence_0 = const()[name = tensor<string, []>("lstm_out_batch_first_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> lstm_out_batch_first_recurrent_activation_0 = const()[name = tensor<string, []>("lstm_out_batch_first_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> lstm_out_batch_first_cell_activation_0 = const()[name = tensor<string, []>("lstm_out_batch_first_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> lstm_out_batch_first_activation_0 = const()[name = tensor<string, []>("lstm_out_batch_first_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp16, [1, 1, 128]> transpose_0_cast_fp16 = transpose(perm = transpose_0_perm_0, x = clip_3_cast_fp16)[name = tensor<string, []>("transpose_1")];
            tensor<fp32, [1, 1, 128]> transpose_0_cast_fp16_to_fp32 = cast(dtype = transpose_0_cast_fp16_to_fp32_dtype_0, x = transpose_0_cast_fp16)[name = tensor<string, []>("cast_6")];
            tensor<fp32, [1, 128]> lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_batch_first_lstm_h0_squeeze_cast_fp16)[name = tensor<string, []>("cast_7")];
            tensor<fp32, [1, 128]> lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_batch_first_lstm_c0_squeeze_cast_fp16)[name = tensor<string, []>("cast_8")];
            tensor<fp32, [1, 1, 128]> lstm_out_batch_first_0, tensor<fp32, [1, 128]> lstm_out_batch_first_1, tensor<fp32, [1, 128]> lstm_out_batch_first_2 = lstm(activation = lstm_out_batch_first_activation_0, bias = concat_0, cell_activation = lstm_out_batch_first_cell_activation_0, direction = lstm_out_batch_first_direction_0, initial_c = lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32, initial_h = lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32, output_sequence = lstm_out_batch_first_output_sequence_0, recurrent_activation = lstm_out_batch_first_recurrent_activation_0, weight_hh = concat_2_palettized, weight_ih = concat_1_palettized, x = transpose_0_cast_fp16_to_fp32)[name = tensor<string, []>("lstm_out_batch_first")];
            tensor<int32, [3]> transpose_1_perm_0 = const()[name = tensor<string, []>("transpose_1_perm_0"), val = tensor<int32, [3]>([1, 2, 0])];
            tensor<string, []> lstm_out_batch_first_0_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_0_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<int32, [1]> hn_axes_0 = const()[name = tensor<string, []>("hn_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_batch_first_1_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_1_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_batch_first_1_to_fp16 = cast(dtype = lstm_out_batch_first_1_to_fp16_dtype_0, x = lstm_out_batch_first_1)[name = tensor<string, []>("cast_5")];
            tensor<fp16, [1, 1, 128]> hn_cast_fp16 = expand_dims(axes = hn_axes_0, x = lstm_out_batch_first_1_to_fp16)[name = tensor<string, []>("hn_cast_fp16")];
            tensor<int32, [1]> cn_axes_0 = const()[name = tensor<string, []>("cn_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_batch_first_2_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_2_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_batch_first_2_to_fp16 = cast(dtype = lstm_out_batch_first_2_to_fp16_dtype_0, x = lstm_out_batch_first_2)[name = tensor<string, []>("cast_4")];
            tensor<fp16, [1, 1, 128]> cn_cast_fp16 = expand_dims(axes = cn_axes_0, x = lstm_out_batch_first_2_to_fp16)[name = tensor<string, []>("cn_cast_fp16")];
            tensor<fp16, [1, 1, 128]> lstm_out_batch_first_0_to_fp16 = cast(dtype = lstm_out_batch_first_0_to_fp16_dtype_0, x = lstm_out_batch_first_0)[name = tensor<string, []>("cast_3")];
            tensor<fp16, [1, 128, 1]> transpose_1_cast_fp16 = transpose(perm = transpose_1_perm_0, x = lstm_out_batch_first_0_to_fp16)[name = tensor<string, []>("transpose_0")];
            tensor<fp16, [1, 128, 1]> input_23_cast_fp16 = relu(x = transpose_1_cast_fp16)[name = tensor<string, []>("input_23_cast_fp16")];
            tensor<string, []> input_pad_type_0 = const()[name = tensor<string, []>("input_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> input_strides_0 = const()[name = tensor<string, []>("input_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> input_pad_0 = const()[name = tensor<string, []>("input_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> input_dilations_0 = const()[name = tensor<string, []>("input_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_groups_0 = const()[name = tensor<string, []>("input_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 1]> decoder_final_conv_weight_to_fp16 = const()[name = tensor<string, []>("decoder_final_conv_weight_to_fp16"), val = tensor<fp16, [1, 128, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(158592)))];
            tensor<fp16, [1]> decoder_final_conv_bias_to_fp16 = const()[name = tensor<string, []>("decoder_final_conv_bias_to_fp16"), val = tensor<fp16, [1]>([0x1.dfp-5])];
            tensor<fp16, [1, 1, 1]> input_cast_fp16 = conv(bias = decoder_final_conv_bias_to_fp16, dilations = input_dilations_0, groups = input_groups_0, pad = input_pad_0, pad_type = input_pad_type_0, strides = input_strides_0, weight = decoder_final_conv_weight_to_fp16, x = input_23_cast_fp16)[name = tensor<string, []>("input_cast_fp16")];
            tensor<fp16, [1, 1, 1]> var_124_cast_fp16 = sigmoid(x = input_cast_fp16)[name = tensor<string, []>("op_124_cast_fp16")];
            tensor<string, []> var_124_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_124_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> var_125_axes_0 = const()[name = tensor<string, []>("op_125_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> var_125_cast_fp16 = squeeze(axes = var_125_axes_0, x = hn_cast_fp16)[name = tensor<string, []>("op_125_cast_fp16")];
            tensor<string, []> var_125_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_125_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> var_126_axes_0 = const()[name = tensor<string, []>("op_126_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> var_126_cast_fp16 = squeeze(axes = var_126_axes_0, x = cn_cast_fp16)[name = tensor<string, []>("op_126_cast_fp16")];
            tensor<string, []> var_126_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_126_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<fp32, [1, 1, 1]> vad_output = cast(dtype = var_124_cast_fp16_to_fp32_dtype_0, x = var_124_cast_fp16)[name = tensor<string, []>("cast_0")];
            tensor<fp32, [1, 128]> new_hidden_state = cast(dtype = var_125_cast_fp16_to_fp32_dtype_0, x = var_125_cast_fp16)[name = tensor<string, []>("cast_1")];
            tensor<fp32, [1, 128]> new_cell_state = cast(dtype = var_126_cast_fp16_to_fp32_dtype_0, x = var_126_cast_fp16)[name = tensor<string, []>("cast_2")];
        } -> (vad_output, new_hidden_state, new_cell_state);
}